# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import catalog_pb2 as catalog__pb2


class CatalogManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetItem = channel.unary_unary(
                '/catalog.CatalogManager/GetItem',
                request_serializer=catalog__pb2.ItemRequest.SerializeToString,
                response_deserializer=catalog__pb2.ItemResponse.FromString,
                )
        self.SetItem = channel.unary_unary(
                '/catalog.CatalogManager/SetItem',
                request_serializer=catalog__pb2.SetItemRequest.SerializeToString,
                response_deserializer=catalog__pb2.ItemResponse.FromString,
                )
        self.DeleteItem = channel.unary_unary(
                '/catalog.CatalogManager/DeleteItem',
                request_serializer=catalog__pb2.ItemRequest.SerializeToString,
                response_deserializer=catalog__pb2.ItemResponse.FromString,
                )
        self.GetItems = channel.unary_unary(
                '/catalog.CatalogManager/GetItems',
                request_serializer=catalog__pb2.ItemsRequest.SerializeToString,
                response_deserializer=catalog__pb2.ItemsResponse.FromString,
                )
        self.SetItems = channel.unary_unary(
                '/catalog.CatalogManager/SetItems',
                request_serializer=catalog__pb2.SetItemsRequest.SerializeToString,
                response_deserializer=catalog__pb2.ItemsResponse.FromString,
                )
        self.DeleteItems = channel.unary_unary(
                '/catalog.CatalogManager/DeleteItems',
                request_serializer=catalog__pb2.ItemsRequest.SerializeToString,
                response_deserializer=catalog__pb2.ItemsResponse.FromString,
                )
        self.GetItemsAsStream = channel.unary_stream(
                '/catalog.CatalogManager/GetItemsAsStream',
                request_serializer=catalog__pb2.ItemsRequest.SerializeToString,
                response_deserializer=catalog__pb2.ItemResponse.FromString,
                )
        self.GetItemsAsStreamInteractive = channel.stream_stream(
                '/catalog.CatalogManager/GetItemsAsStreamInteractive',
                request_serializer=catalog__pb2.ItemRequest.SerializeToString,
                response_deserializer=catalog__pb2.ItemResponse.FromString,
                )


class CatalogManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetItem(self, request, context):
        """APIs for single item
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetItems(self, request, context):
        """APIs for multiple items
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetItems(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteItems(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetItemsAsStream(self, request, context):
        """APIs for multiple items using stream
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetItemsAsStreamInteractive(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CatalogManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetItem': grpc.unary_unary_rpc_method_handler(
                    servicer.GetItem,
                    request_deserializer=catalog__pb2.ItemRequest.FromString,
                    response_serializer=catalog__pb2.ItemResponse.SerializeToString,
            ),
            'SetItem': grpc.unary_unary_rpc_method_handler(
                    servicer.SetItem,
                    request_deserializer=catalog__pb2.SetItemRequest.FromString,
                    response_serializer=catalog__pb2.ItemResponse.SerializeToString,
            ),
            'DeleteItem': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteItem,
                    request_deserializer=catalog__pb2.ItemRequest.FromString,
                    response_serializer=catalog__pb2.ItemResponse.SerializeToString,
            ),
            'GetItems': grpc.unary_unary_rpc_method_handler(
                    servicer.GetItems,
                    request_deserializer=catalog__pb2.ItemsRequest.FromString,
                    response_serializer=catalog__pb2.ItemsResponse.SerializeToString,
            ),
            'SetItems': grpc.unary_unary_rpc_method_handler(
                    servicer.SetItems,
                    request_deserializer=catalog__pb2.SetItemsRequest.FromString,
                    response_serializer=catalog__pb2.ItemsResponse.SerializeToString,
            ),
            'DeleteItems': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteItems,
                    request_deserializer=catalog__pb2.ItemsRequest.FromString,
                    response_serializer=catalog__pb2.ItemsResponse.SerializeToString,
            ),
            'GetItemsAsStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetItemsAsStream,
                    request_deserializer=catalog__pb2.ItemsRequest.FromString,
                    response_serializer=catalog__pb2.ItemResponse.SerializeToString,
            ),
            'GetItemsAsStreamInteractive': grpc.stream_stream_rpc_method_handler(
                    servicer.GetItemsAsStreamInteractive,
                    request_deserializer=catalog__pb2.ItemRequest.FromString,
                    response_serializer=catalog__pb2.ItemResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'catalog.CatalogManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CatalogManager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/catalog.CatalogManager/GetItem',
            catalog__pb2.ItemRequest.SerializeToString,
            catalog__pb2.ItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/catalog.CatalogManager/SetItem',
            catalog__pb2.SetItemRequest.SerializeToString,
            catalog__pb2.ItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/catalog.CatalogManager/DeleteItem',
            catalog__pb2.ItemRequest.SerializeToString,
            catalog__pb2.ItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetItems(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/catalog.CatalogManager/GetItems',
            catalog__pb2.ItemsRequest.SerializeToString,
            catalog__pb2.ItemsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetItems(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/catalog.CatalogManager/SetItems',
            catalog__pb2.SetItemsRequest.SerializeToString,
            catalog__pb2.ItemsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteItems(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/catalog.CatalogManager/DeleteItems',
            catalog__pb2.ItemsRequest.SerializeToString,
            catalog__pb2.ItemsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetItemsAsStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/catalog.CatalogManager/GetItemsAsStream',
            catalog__pb2.ItemsRequest.SerializeToString,
            catalog__pb2.ItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetItemsAsStreamInteractive(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/catalog.CatalogManager/GetItemsAsStreamInteractive',
            catalog__pb2.ItemRequest.SerializeToString,
            catalog__pb2.ItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
