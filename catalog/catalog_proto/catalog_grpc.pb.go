// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: catalog_proto/catalog.proto

package catalog_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CatalogManager_GetItem_FullMethodName                     = "/catalog.CatalogManager/GetItem"
	CatalogManager_SetItem_FullMethodName                     = "/catalog.CatalogManager/SetItem"
	CatalogManager_DeleteItem_FullMethodName                  = "/catalog.CatalogManager/DeleteItem"
	CatalogManager_GetItems_FullMethodName                    = "/catalog.CatalogManager/GetItems"
	CatalogManager_SetItems_FullMethodName                    = "/catalog.CatalogManager/SetItems"
	CatalogManager_DeleteItems_FullMethodName                 = "/catalog.CatalogManager/DeleteItems"
	CatalogManager_GetItemsAsStream_FullMethodName            = "/catalog.CatalogManager/GetItemsAsStream"
	CatalogManager_GetItemsAsStreamInteractive_FullMethodName = "/catalog.CatalogManager/GetItemsAsStreamInteractive"
)

// CatalogManagerClient is the client API for CatalogManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogManagerClient interface {
	// APIs for single item
	GetItem(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*ItemResponse, error)
	SetItem(ctx context.Context, in *SetItemRequest, opts ...grpc.CallOption) (*ItemResponse, error)
	DeleteItem(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*ItemResponse, error)
	// APIs for multiple items
	GetItems(ctx context.Context, in *ItemsRequest, opts ...grpc.CallOption) (*ItemsResponse, error)
	SetItems(ctx context.Context, in *SetItemsRequest, opts ...grpc.CallOption) (*ItemsResponse, error)
	DeleteItems(ctx context.Context, in *ItemsRequest, opts ...grpc.CallOption) (*ItemsResponse, error)
	// APIs for multiple items using stream
	GetItemsAsStream(ctx context.Context, in *ItemsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ItemResponse], error)
	GetItemsAsStreamInteractive(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ItemRequest, ItemResponse], error)
}

type catalogManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogManagerClient(cc grpc.ClientConnInterface) CatalogManagerClient {
	return &catalogManagerClient{cc}
}

func (c *catalogManagerClient) GetItem(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*ItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemResponse)
	err := c.cc.Invoke(ctx, CatalogManager_GetItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogManagerClient) SetItem(ctx context.Context, in *SetItemRequest, opts ...grpc.CallOption) (*ItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemResponse)
	err := c.cc.Invoke(ctx, CatalogManager_SetItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogManagerClient) DeleteItem(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*ItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemResponse)
	err := c.cc.Invoke(ctx, CatalogManager_DeleteItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogManagerClient) GetItems(ctx context.Context, in *ItemsRequest, opts ...grpc.CallOption) (*ItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemsResponse)
	err := c.cc.Invoke(ctx, CatalogManager_GetItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogManagerClient) SetItems(ctx context.Context, in *SetItemsRequest, opts ...grpc.CallOption) (*ItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemsResponse)
	err := c.cc.Invoke(ctx, CatalogManager_SetItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogManagerClient) DeleteItems(ctx context.Context, in *ItemsRequest, opts ...grpc.CallOption) (*ItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemsResponse)
	err := c.cc.Invoke(ctx, CatalogManager_DeleteItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogManagerClient) GetItemsAsStream(ctx context.Context, in *ItemsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ItemResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CatalogManager_ServiceDesc.Streams[0], CatalogManager_GetItemsAsStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ItemsRequest, ItemResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CatalogManager_GetItemsAsStreamClient = grpc.ServerStreamingClient[ItemResponse]

func (c *catalogManagerClient) GetItemsAsStreamInteractive(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ItemRequest, ItemResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CatalogManager_ServiceDesc.Streams[1], CatalogManager_GetItemsAsStreamInteractive_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ItemRequest, ItemResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CatalogManager_GetItemsAsStreamInteractiveClient = grpc.BidiStreamingClient[ItemRequest, ItemResponse]

// CatalogManagerServer is the server API for CatalogManager service.
// All implementations must embed UnimplementedCatalogManagerServer
// for forward compatibility.
type CatalogManagerServer interface {
	// APIs for single item
	GetItem(context.Context, *ItemRequest) (*ItemResponse, error)
	SetItem(context.Context, *SetItemRequest) (*ItemResponse, error)
	DeleteItem(context.Context, *ItemRequest) (*ItemResponse, error)
	// APIs for multiple items
	GetItems(context.Context, *ItemsRequest) (*ItemsResponse, error)
	SetItems(context.Context, *SetItemsRequest) (*ItemsResponse, error)
	DeleteItems(context.Context, *ItemsRequest) (*ItemsResponse, error)
	// APIs for multiple items using stream
	GetItemsAsStream(*ItemsRequest, grpc.ServerStreamingServer[ItemResponse]) error
	GetItemsAsStreamInteractive(grpc.BidiStreamingServer[ItemRequest, ItemResponse]) error
	mustEmbedUnimplementedCatalogManagerServer()
}

// UnimplementedCatalogManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCatalogManagerServer struct{}

func (UnimplementedCatalogManagerServer) GetItem(context.Context, *ItemRequest) (*ItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedCatalogManagerServer) SetItem(context.Context, *SetItemRequest) (*ItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetItem not implemented")
}
func (UnimplementedCatalogManagerServer) DeleteItem(context.Context, *ItemRequest) (*ItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedCatalogManagerServer) GetItems(context.Context, *ItemsRequest) (*ItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItems not implemented")
}
func (UnimplementedCatalogManagerServer) SetItems(context.Context, *SetItemsRequest) (*ItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetItems not implemented")
}
func (UnimplementedCatalogManagerServer) DeleteItems(context.Context, *ItemsRequest) (*ItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItems not implemented")
}
func (UnimplementedCatalogManagerServer) GetItemsAsStream(*ItemsRequest, grpc.ServerStreamingServer[ItemResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetItemsAsStream not implemented")
}
func (UnimplementedCatalogManagerServer) GetItemsAsStreamInteractive(grpc.BidiStreamingServer[ItemRequest, ItemResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetItemsAsStreamInteractive not implemented")
}
func (UnimplementedCatalogManagerServer) mustEmbedUnimplementedCatalogManagerServer() {}
func (UnimplementedCatalogManagerServer) testEmbeddedByValue()                        {}

// UnsafeCatalogManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogManagerServer will
// result in compilation errors.
type UnsafeCatalogManagerServer interface {
	mustEmbedUnimplementedCatalogManagerServer()
}

func RegisterCatalogManagerServer(s grpc.ServiceRegistrar, srv CatalogManagerServer) {
	// If the following call pancis, it indicates UnimplementedCatalogManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CatalogManager_ServiceDesc, srv)
}

func _CatalogManager_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogManagerServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogManager_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogManagerServer).GetItem(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogManager_SetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogManagerServer).SetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogManager_SetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogManagerServer).SetItem(ctx, req.(*SetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogManager_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogManagerServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogManager_DeleteItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogManagerServer).DeleteItem(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogManager_GetItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogManagerServer).GetItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogManager_GetItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogManagerServer).GetItems(ctx, req.(*ItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogManager_SetItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogManagerServer).SetItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogManager_SetItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogManagerServer).SetItems(ctx, req.(*SetItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogManager_DeleteItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogManagerServer).DeleteItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogManager_DeleteItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogManagerServer).DeleteItems(ctx, req.(*ItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogManager_GetItemsAsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ItemsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CatalogManagerServer).GetItemsAsStream(m, &grpc.GenericServerStream[ItemsRequest, ItemResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CatalogManager_GetItemsAsStreamServer = grpc.ServerStreamingServer[ItemResponse]

func _CatalogManager_GetItemsAsStreamInteractive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CatalogManagerServer).GetItemsAsStreamInteractive(&grpc.GenericServerStream[ItemRequest, ItemResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CatalogManager_GetItemsAsStreamInteractiveServer = grpc.BidiStreamingServer[ItemRequest, ItemResponse]

// CatalogManager_ServiceDesc is the grpc.ServiceDesc for CatalogManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatalogManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catalog.CatalogManager",
	HandlerType: (*CatalogManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItem",
			Handler:    _CatalogManager_GetItem_Handler,
		},
		{
			MethodName: "SetItem",
			Handler:    _CatalogManager_SetItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _CatalogManager_DeleteItem_Handler,
		},
		{
			MethodName: "GetItems",
			Handler:    _CatalogManager_GetItems_Handler,
		},
		{
			MethodName: "SetItems",
			Handler:    _CatalogManager_SetItems_Handler,
		},
		{
			MethodName: "DeleteItems",
			Handler:    _CatalogManager_DeleteItems_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetItemsAsStream",
			Handler:       _CatalogManager_GetItemsAsStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetItemsAsStreamInteractive",
			Handler:       _CatalogManager_GetItemsAsStreamInteractive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "catalog_proto/catalog.proto",
}
